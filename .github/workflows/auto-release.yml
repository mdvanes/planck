name: Auto Release on Version Change

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract versionName and decide if release needed
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('app/build.gradle.kts','utf8');
            const match = content.match(/versionName\s*=\s*"([^"]+)"/);
            if (!match) {
              core.setFailed('versionName not found in app/build.gradle.kts');
              return;
            }
            const versionName = match[1].trim();
            core.info(`Found versionName: ${versionName}`);
            // List releases (sorted newest first)
            const releases = await github.paginate(github.rest.repos.listReleases, { owner: context.repo.owner, repo: context.repo.repo, per_page: 100 });
            const latest = releases.length ? releases[0] : null;
            if (latest && latest.tag_name === versionName) {
              core.info('Latest release already matches versionName; skipping release creation.');
              core.setOutput('should_release', 'false');
              return;
            }
            core.setOutput('should_release', 'true');
            core.setOutput('version', versionName);
            core.setOutput('previous_tag', latest ? latest.tag_name : '');

      - name: Gather commit messages since last release
        id: notes
        if: steps.version.outputs.should_release == 'true'
        run: |
          if [ -n "${{ steps.version.outputs.previous_tag }}" ]; then
            COMMITS=$(git log ${{ steps.version.outputs.previous_tag }}..HEAD --pretty=format:'- %s')
          else
            COMMITS=$(git log --pretty=format:'- %s')
          fi
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.version.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body: ${{ steps.notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

